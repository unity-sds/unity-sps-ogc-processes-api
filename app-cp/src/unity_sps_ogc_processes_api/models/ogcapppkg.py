# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field

from unity_sps_ogc_processes_api.models.ogcapppkg_execution_unit import (
    OgcapppkgExecutionUnit,
)
from unity_sps_ogc_processes_api.models.process import Process

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Ogcapppkg(BaseModel):
    """
    Ogcapppkg
    """  # noqa: E501

    process_description: Optional[Process] = Field(
        default=None, alias="processDescription"
    )
    execution_unit: OgcapppkgExecutionUnit = Field(alias="executionUnit")
    __properties: ClassVar[List[str]] = ["processDescription", "executionUnit"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Ogcapppkg from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of process_description
        if self.process_description:
            _dict["processDescription"] = self.process_description.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_unit
        if self.execution_unit:
            _dict["executionUnit"] = self.execution_unit.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Ogcapppkg from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "processDescription": (
                    Process.from_dict(obj.get("processDescription"))
                    if obj.get("processDescription") is not None
                    else None
                ),
                "executionUnit": (
                    OgcapppkgExecutionUnit.from_dict(obj.get("executionUnit"))
                    if obj.get("executionUnit") is not None
                    else None
                ),
            }
        )
        return _obj
