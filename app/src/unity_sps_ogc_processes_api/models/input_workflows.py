# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
from typing import Any, Dict, List, Union

from pydantic import RootModel, ValidationError, model_validator
from unity_sps_ogc_processes_api.models.bbox1 import Bbox1
from unity_sps_ogc_processes_api.models.input_collection import InputCollection
from unity_sps_ogc_processes_api.models.input_parameterized import InputParameterized
from unity_sps_ogc_processes_api.models.input_process import InputProcess
from unity_sps_ogc_processes_api.models.link import Link
from unity_sps_ogc_processes_api.models.qualified_input_value_workflows import QualifiedInputValueWorkflows


class InputWorkflows(RootModel):
    root: Union[
        Bbox1,
        InputCollection,
        InputParameterized,
        InputProcess,
        List[Any],
        bool,
        float,
        int,
        str,
        Link,
        QualifiedInputValueWorkflows,
        List[
            Union[
                Bbox1,
                InputCollection,
                InputParameterized,
                InputProcess,
                List[Any],
                bool,
                float,
                int,
                str,
                Link,
                QualifiedInputValueWorkflows,
            ]
        ],
    ]

    @model_validator(mode="before")
    @classmethod
    def validate_type(cls, value):
        if isinstance(value, dict):
            for schema in [
                Bbox1,
                InputCollection,
                InputParameterized,
                InputProcess,
                Link,
                QualifiedInputValueWorkflows,
            ]:
                try:
                    return schema(**value)
                except ValidationError:
                    pass
        elif isinstance(value, list):
            return [cls.validate_type(item) for item in value]
        elif isinstance(
            value,
            (
                bool,
                int,
                float,
                str,
                Bbox1,
                InputCollection,
                InputParameterized,
                InputProcess,
                Link,
                QualifiedInputValueWorkflows,
            ),
        ):
            return value
        elif isinstance(value, List):
            return value
        raise ValueError(f"Invalid type for InputWorkflows: {type(value)}")

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> InputWorkflows:
        return cls(root=cls.validate_type(obj))

    @classmethod
    def from_json(cls, json_str: str) -> InputWorkflows:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        if isinstance(self.root, list):
            return [self._item_to_dict(item) for item in self.root]
        return self._item_to_dict(self.root)

    def _item_to_dict(self, item):
        if hasattr(item, "model_dump"):
            return item.model_dump()
        return item

    def to_json(self) -> str:
        return json.dumps(self.to_dict())

    def __getattr__(self, name: str) -> Any:
        return getattr(self.root, name)

    def __repr__(self) -> str:
        return f"InputWorkflows({self.root!r})"

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump())
