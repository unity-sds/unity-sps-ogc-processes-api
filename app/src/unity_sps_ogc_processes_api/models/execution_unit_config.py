# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt
from typing_extensions import Annotated

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ExecutionUnitConfig(BaseModel):
    """
    Hardware requirements and configuration properties for executing the process.
    """  # noqa: E501

    cpu_min: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None,
        description="Minimum number of CPUs required to run the process (unit is CPU core).",
        alias="cpuMin",
    )
    cpu_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Maximum number of CPU dedicated to the process (unit is CPU core)",
        alias="cpuMax",
    )
    memory_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Minimum RAM memory required to run the application (unit is GB)",
        alias="memoryMin",
    )
    memory_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Maximum RAM memory dedicated to the application (unit is GB)",
        alias="memoryMax",
    )
    storage_temp_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Minimum required temporary storage size (unit is GB)",
        alias="storageTempMin",
    )
    storage_outputs_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Minimum required output storage size (unit is GB)",
        alias="storageOutputsMin",
    )
    job_timeout: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Timeout delay for a job execution (in seconds)",
        alias="jobTimeout",
    )
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "cpuMin",
        "cpuMax",
        "memoryMin",
        "memoryMax",
        "storageTempMin",
        "storageOutputsMin",
        "jobTimeout",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExecutionUnitConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "additional_properties",
            },
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExecutionUnitConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "cpuMin": obj.get("cpuMin"),
                "cpuMax": obj.get("cpuMax"),
                "memoryMin": obj.get("memoryMin"),
                "memoryMax": obj.get("memoryMax"),
                "storageTempMin": obj.get("storageTempMin"),
                "storageOutputsMin": obj.get("storageOutputsMin"),
                "jobTimeout": obj.get("jobTimeout"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
