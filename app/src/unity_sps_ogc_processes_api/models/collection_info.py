# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated

from unity_sps_ogc_processes_api.models.collection_info_data_type import (
    CollectionInfoDataType,
)
from unity_sps_ogc_processes_api.models.extent_uad import ExtentUad
from unity_sps_ogc_processes_api.models.link import Link

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class CollectionInfo(BaseModel):
    """
    CollectionInfo
    """  # noqa: E501

    id: StrictStr = Field(
        description="identifier of the collection used, for example, in URIs"
    )
    title: Optional[StrictStr] = Field(
        default=None, description="human readable title of the collection"
    )
    description: Optional[StrictStr] = Field(
        default=None, description="a description of the data in the collection"
    )
    links: List[Link]
    extent: Optional[ExtentUad] = None
    item_type: Optional[StrictStr] = Field(
        default="unknown",
        description="indicator about the type of the items in the collection if the collection has an accessible /collections/{collectionId}/items endpoint",
        alias="itemType",
    )
    crs: Optional[List[StrictStr]] = Field(
        default=None,
        description="the list of coordinate reference systems supported by the API; the first item is the default coordinate reference system",
    )
    data_type: Optional[CollectionInfoDataType] = Field(default=None, alias="dataType")
    geometry_dimension: Optional[Annotated[int, Field(le=3, strict=True, ge=0)]] = (
        Field(
            default=None,
            description="The geometry dimension of the features shown in this layer (0: points, 1: curves, 2: surfaces, 3: solids), unspecified: mixed or unknown",
            alias="geometryDimension",
        )
    )
    min_scale_denominator: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Minimum scale denominator for usage of the collection",
        alias="minScaleDenominator",
    )
    max_scale_denominator: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Maximum scale denominator for usage of the collection",
        alias="maxScaleDenominator",
    )
    min_cell_size: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Minimum cell size for usage of the collection",
        alias="minCellSize",
    )
    max_cell_size: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="Maximum cell size for usage of the collection",
        alias="maxCellSize",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "title",
        "description",
        "links",
        "extent",
        "itemType",
        "crs",
        "dataType",
        "geometryDimension",
        "minScaleDenominator",
        "maxScaleDenominator",
        "minCellSize",
        "maxCellSize",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CollectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item in self.links:
                if _item:
                    _items.append(_item.to_dict())
            _dict["links"] = _items
        # override the default output from pydantic by calling `to_dict()` of extent
        if self.extent:
            _dict["extent"] = self.extent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict["dataType"] = self.data_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CollectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "title": obj.get("title"),
                "description": obj.get("description"),
                "links": (
                    [Link.from_dict(_item) for _item in obj.get("links")]
                    if obj.get("links") is not None
                    else None
                ),
                "extent": (
                    ExtentUad.from_dict(obj.get("extent"))
                    if obj.get("extent") is not None
                    else None
                ),
                "itemType": (
                    obj.get("itemType")
                    if obj.get("itemType") is not None
                    else "unknown"
                ),
                "crs": obj.get("crs"),
                "dataType": (
                    CollectionInfoDataType.from_dict(obj.get("dataType"))
                    if obj.get("dataType") is not None
                    else None
                ),
                "geometryDimension": obj.get("geometryDimension"),
                "minScaleDenominator": obj.get("minScaleDenominator"),
                "maxScaleDenominator": obj.get("maxScaleDenominator"),
                "minCellSize": obj.get("minCellSize"),
                "maxCellSize": obj.get("maxCellSize"),
            }
        )
        return _obj
