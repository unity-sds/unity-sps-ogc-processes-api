# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated

from unity_sps_ogc_processes_api.models.extent_spatial_grid_inner import (
    ExtentSpatialGridInner,
)

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ExtentSpatial(BaseModel):
    """
    The spatial extent of the data in the collection.
    """  # noqa: E501

    bbox: Optional[
        Annotated[List[List[Union[StrictFloat, StrictInt]]], Field(min_length=1)]
    ] = Field(
        default=None,
        description="One or more bounding boxes that describe the spatial extent of the dataset. In the Core only a single bounding box is supported.  Extensions may support additional areas. The first bounding box describes the overall spatial extent of the data. All subsequent bounding boxes describe more precise bounding boxes, e.g., to identify clusters of data. Clients only interested in the overall spatial extent will only need to access the first item in each array.",
    )
    crs: Optional[StrictStr] = Field(
        default="1.3/CRS84",
        description="Coordinate reference system of the coordinates in the spatial extent (property `bbox`). The default reference system is WGS 84 longitude/latitude. In the Core the only other supported coordinate reference system is WGS 84 longitude/latitude/ellipsoidal height for coordinates with height. Extensions may support additional coordinate reference systems and add additional enum values.",
    )
    grid: Optional[
        Annotated[List[ExtentSpatialGridInner], Field(min_length=2, max_length=3)]
    ] = Field(
        default=None,
        description="Provides information about the limited availability of data within the collection organized as a grid (regular or irregular) along each spatial dimension.",
    )
    __properties: ClassVar[List[str]] = ["bbox", "crs", "grid"]

    @field_validator("crs")
    def crs_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "http://www.opengis.net/def/crs/OGC/1.3/CRS84",
            "http://www.opengis.net/def/crs/OGC/0/CRS84h",
        ):
            raise ValueError(
                "must be one of enum values ('http://www.opengis.net/def/crs/OGC/1.3/CRS84', 'http://www.opengis.net/def/crs/OGC/0/CRS84h')"
            )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExtentSpatial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grid (list)
        _items = []
        if self.grid:
            for _item in self.grid:
                if _item:
                    _items.append(_item.to_dict())
            _dict["grid"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExtentSpatial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "bbox": obj.get("bbox"),
                "crs": obj.get("crs") if obj.get("crs") is not None else "1.3/CRS84",
                "grid": (
                    [
                        ExtentSpatialGridInner.from_dict(_item)
                        for _item in obj.get("grid")
                    ]
                    if obj.get("grid") is not None
                    else None
                ),
            }
        )
        return _obj
