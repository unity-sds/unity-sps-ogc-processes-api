# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated
from unity_sps_ogc_processes_api.models.geo_json_feature_geometry import GeoJSONFeatureGeometry
from unity_sps_ogc_processes_api.models.geo_json_feature_id import GeoJSONFeatureId

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class GeoJSONFeature(BaseModel):
    """
    GeoJSONFeature
    """  # noqa: E501

    type: StrictStr
    id: Optional[GeoJSONFeatureId] = None
    properties: Optional[Dict[str, Any]]
    geometry: GeoJSONFeatureGeometry
    bbox: Optional[Annotated[List[Union[StrictFloat, StrictInt]], Field(min_length=4)]] = None
    __properties: ClassVar[List[str]] = ["type", "id", "properties", "geometry", "bbox"]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("Feature"):
            raise ValueError("must be one of enum values ('Feature')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of GeoJSONFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict["id"] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geometry
        if self.geometry:
            _dict["geometry"] = self.geometry.to_dict()
        # set to None if properties (nullable) is None
        # and model_fields_set contains the field
        if self.properties is None and "properties" in self.model_fields_set:
            _dict["properties"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of GeoJSONFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "id": (GeoJSONFeatureId.from_dict(obj.get("id")) if obj.get("id") is not None else None),
                "properties": obj.get("properties"),
                "geometry": (
                    GeoJSONFeatureGeometry.from_dict(obj.get("geometry"))
                    if obj.get("geometry") is not None
                    else None
                ),
                "bbox": obj.get("bbox"),
            }
        )
        return _obj
