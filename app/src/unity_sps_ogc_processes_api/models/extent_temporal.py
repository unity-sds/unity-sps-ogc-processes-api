# coding: utf-8

"""
    OGC API - Processes

    Example API Definition for OGC API - Processes

    The version of the OpenAPI document: 0.1
    Contact: info@ogc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing_extensions import Annotated
from unity_sps_ogc_processes_api.models.extent_temporal_grid import ExtentTemporalGrid

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ExtentTemporal(BaseModel):
    """
    The temporal extent of the features in the collection.
    """  # noqa: E501

    interval: Optional[
        Annotated[
            List[Annotated[List[Optional[datetime]], Field(min_length=2, max_length=2)]],
            Field(min_length=1),
        ]
    ] = Field(
        default=None,
        description="One or more time intervals that describe the temporal extent of the dataset. In the Core only a single time interval is supported.  Extensions may support multiple intervals. The first time interval describes the overall temporal extent of the data. All subsequent time intervals describe more precise time intervals, e.g., to identify clusters of data. Clients only interested in the overall extent will only need to access the first item in each array.",
    )
    trs: Optional[StrictStr] = Field(
        default="http://www.opengis.net/def/uom/ISO-8601/0/Gregorian",
        description="Coordinate reference system of the coordinates in the temporal extent (property `interval`). The default reference system is the Gregorian calendar. In the Core this is the only supported temporal coordinate reference system. Extensions may support additional temporal coordinate reference systems and add additional enum values.",
    )
    grid: Optional[ExtentTemporalGrid] = None
    __properties: ClassVar[List[str]] = ["interval", "trs", "grid"]

    @field_validator("trs")
    def trs_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"):
            raise ValueError(
                "must be one of enum values ('http://www.opengis.net/def/uom/ISO-8601/0/Gregorian')"
            )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExtentTemporal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of grid
        if self.grid:
            _dict["grid"] = self.grid.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExtentTemporal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "interval": obj.get("interval"),
                "trs": (
                    obj.get("trs")
                    if obj.get("trs") is not None
                    else "http://www.opengis.net/def/uom/ISO-8601/0/Gregorian"
                ),
                "grid": (
                    ExtentTemporalGrid.from_dict(obj.get("grid")) if obj.get("grid") is not None else None
                ),
            }
        )
        return _obj
